# -*- mode: yaml -*-

# References:
#   https://github.com/fastai/fastai/blob/22b32aab155dcfa5ebf10d4b86f125039811bd5d/azure-pipelines.yml
#   https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/anaconda?view=azure-devops&tabs=vs2017
#   https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/python?view=azure-devops
#   https://github.com/microsoft/azure-pipelines-tasks/issues/8504

trigger:
- azure_install

schedules:
- cron: "0 0 * * *"
  displayName: Daily midnight build
  branches:
    include:
    - azure_install
  always: true

jobs:
# Linux #######################################################################
#
# pip -------------------------------------------------------------------------
- job: linux_pip_pypi
  displayName: Ubuntu pip from PyPI
  pool:
    vmImage: ubuntu-16.04
  steps:
  - script: |
      python3 -m pip install -U pip --user
      python3 -m pip install openpmd-api --user
  - script: python3 -c "import openpmd_api as api; print(api.variants)"

- job: linux_pip_pypi_nobin
  displayName: Ubuntu pip from PyPI w/o binary
  pool:
    vmImage: ubuntu-18.04
  steps:
  - script: |
      python3 -m pip install -U pip setuptools wheel cmake --user
      python3 -m pip install openpmd-api --no-binary openpmd-api --user
  - script: python3 -c "import openpmd_api as api; print(api.variants)"

- job: linux_pip_pypi_mpich
  displayName: Ubuntu pip from PyPI w/ MPICH
  pool:
    vmImage: ubuntu-18.04
  steps:
  - script: |
      sudo apt-get update
      sudo apt-get install -y libmpich-dev
      python3 -m pip install -U pip setuptools wheel cmake --user
      openPMD_USE_MPI=ON python3 -m pip install openpmd-api --no-binary openpmd-api --user
  - script: python3 -c "import openpmd_api as api; print(api.variants)"

- job: linux_pip_dev_openmpi
  displayName: Ubuntu pip from dev w/ OpenMPI
  pool:
    vmImage: ubuntu-latest
  steps:
  - script: |
      sudo apt-get update
      sudo apt-get install -y libopenmpi-dev
      python3 -m pip install -U pip setuptools wheel cmake --user
      openPMD_USE_MPI=ON python3 -m pip install git+https://github.com/openPMD/openPMD-api.git@dev --user
  - script: python3 -c "import openpmd_api as api; print(api.variants)"

- job: linux_pip_dev
  displayName: Ubuntu pip from dev
  pool:
    vmImage: ubuntu-latest
  steps:
  - script: |
      python3 -m pip install -U pip --user
      python3 -m pip install git+https://github.com/openPMD/openPMD-api.git@dev --user
  - script: python3 -c "import openpmd_api as api; print(api.variants)"

# conda -----------------------------------------------------------------------
# attn: each build step runs in its own process and might require
#       "conda activate <env>"!
- job: linux_conda
  displayName: Ubuntu conda
  pool:
    vmImage: ubuntu-16.04
  steps:
  - bash: echo "##vso[task.prependpath]$CONDA/bin"
    displayName: Add conda to PATH
  - script: |
      conda install -y -c conda-forge openpmd-api
  - script: python3 -c "import openpmd_api as api; print(api.variants)"

- job: linux_conda_mpich
  displayName: Ubuntu conda w/ MPICH
  pool:
    vmImage: ubuntu-18.04
  steps:
  - bash: echo "##vso[task.prependpath]$CONDA/bin"
    displayName: Add conda to PATH
  - script: |
      conda install -y -c conda-forge openpmd-api=*=mpi_mpich*
  - script: python3 -c "import openpmd_api as api; print(api.variants)"

- job: linux_conda_openmpi
  displayName: Ubuntu conda w/ OpenMPI
  pool:
    vmImage: ubuntu-latest
  steps:
  - bash: echo "##vso[task.prependpath]$CONDA/bin"
    displayName: Add conda to PATH
  - script: |
      conda install -y -c conda-forge openpmd-api=*=mpi_openmpi*
  - script: python3 -c "import openpmd_api as api; print(api.variants)"

- job: linux_conda_cuda_mpi
  displayName: Ubuntu conda w/ CUDA
  pool:
    vmImage: ubuntu-latest
  steps:
  - bash: echo "##vso[task.prependpath]$CONDA/bin"
    displayName: Add conda to PATH
  - script: |
      source activate base
      conda install -y -c conda-forge openpmd-api=*=mpi* cudatoolkit-dev
      echo '#include <openPMD/openPMD.hpp>' > main.cu
      echo 'int main(){ return 0; }' >> main.cu
      nvcc -std c++11 main.cu
      nvcc -std c++14 main.cu
# CUDA 10.2+:
#     nvcc --Werror all-warnings -std c++14 main.cu

# spack -----------------------------------------------------------------------
# timeout: >60min
#- job: linux_spack
#  displayName: Ubuntu spack
#  pool:
#    vmImage: ubuntu-latest
#  steps:
#  - script: |
#      sudo apt-get update
#      sudo apt-get install -y gfortran
#      export SYSTEM=$(uname -s)
#      git clone https://github.com/spack/spack.git
#      . spack/share/spack/setup-env.sh
#      spack compiler find
#      spack install -v openpmd-api %gcc@5.5.0

- job: linux_spack_nompi
  displayName: Ubuntu spack w/o MPI
  pool:
    vmImage: ubuntu-latest
  steps:
  - script: |
      export SYSTEM=$(uname -s)
      git clone https://github.com/spack/spack.git
      . spack/share/spack/setup-env.sh
      spack compiler find
      spack install -v openpmd-api -mpi

# timeout: >60min
#- job: linux_spack_all
#  displayName: Ubuntu spack w/ all
#  pool:
#    vmImage: ubuntu-latest
#  steps:
#  - script: |
#      sudo apt-get update
#      sudo apt-get install -y gfortran
#      export SYSTEM=$(uname -s)
#      git clone https://github.com/spack/spack.git
#      . spack/share/spack/setup-env.sh
#      spack compiler find
#      spack bootstrap
#      . spack/share/spack/setup-env.sh
#      spack install -v openpmd-api +python +adios1 +adios2 %gcc@5.5.0
#      spack load -r openpmd-api
#      python -c "import openpmd_api as api; print(api.variants)"

# linuxbrew -------------------------------------------------------------------
# TODO

# source ----------------------------------------------------------------------
# TODO


# macOS #######################################################################
#
# pip -------------------------------------------------------------------------
- job: macOS_pip_pypi
  displayName: macOS pip from PyPI
  pool:
    vmImage: macOS-10.13
  steps:
  - script: |
      python3 -m pip install -U pip --user
      python3 -m pip install openpmd-api --user
  - script: python3 -c "import openpmd_api as api; print(api.variants)"

- job: macOS_pip_pypi_nobin
  displayName: macOS pip from PyPI w/o binary
  pool:
    vmImage: macOS-10.13
  steps:
  - script: |
      python3 -m pip install -U pip setuptools wheel cmake --user
      python3 -m pip install openpmd-api --no-binary openpmd-api --user
  - script: python3 -c "import openpmd_api as api; print(api.variants)"

- job: macOS_pip_pypi_mpich
  displayName: macOS pip from PyPI w/ MPICH
  pool:
    vmImage: macOS-10.14
  steps:
  - script: |
      brew update
      brew install mpich
      python3 -m pip install -U pip setuptools wheel cmake --user
      openPMD_USE_MPI=ON python3 -m pip install openpmd-api --no-binary openpmd-api --user
  - script: python3 -c "import openpmd_api as api; print(api.variants)"

- job: macOS_pip_dev_openmpi
  displayName: macOS pip from dev w/ OpenMPI
  pool:
    vmImage: macOS-latest
  steps:
  - script: |
      brew update
      brew install openmpi
      python3 -m pip install -U pip --user
      openPMD_USE_MPI=ON python3 -m pip install git+https://github.com/openPMD/openPMD-api.git@dev --user
  - script: python3 -c "import openpmd_api as api; print(api.variants)"

- job: macOS_pip_dev
  displayName: macOS pip from dev
  pool:
    vmImage: macOS-latest
  steps:
  - script: |
      python3 -m pip install -U pip --user
      python3 -m pip install git+https://github.com/openPMD/openPMD-api.git@dev --user
  - script: python3 -c "import openpmd_api as api; print(api.variants)"

# conda -----------------------------------------------------------------------
# attn: each build step runs in its own process and might require
#       "conda activate <env>"!
- job: macOS_conda
  displayName: macOS conda
  pool:
    vmImage: macOS-10.13
  steps:
  - bash: |
      echo "##vso[task.prependpath]$CONDA/bin"
      sudo chown -R $USER $CONDA
    displayName: Add conda to PATH
  - script: |
      conda install -y -c conda-forge openpmd-api
  - script: python3 -c "import openpmd_api as api; print(api.variants)"

- job: macOS_conda_mpich
  displayName: macOS conda w/ MPICH
  pool:
    vmImage: macOS-10.14
  steps:
  - bash: |
      echo "##vso[task.prependpath]$CONDA/bin"
      sudo chown -R $USER $CONDA
    displayName: Add conda to PATH
  - script: |
      conda install -y -c conda-forge openpmd-api=*=mpi_mpich*
  - script: python3 -c "import openpmd_api as api; print(api.variants)"

- job: macOS_conda_openmpi
  displayName: macOS conda w/ OpenMPI
  pool:
    vmImage: macOS-latest
  steps:
  - bash: |
      echo "##vso[task.prependpath]$CONDA/bin"
      sudo chown -R $USER $CONDA
    displayName: Add conda to PATH
  - script: |
      conda install -y -c conda-forge openpmd-api=*=mpi_openmpi*
  - script: python3 -c "import openpmd_api as api; print(api.variants)"

# spack -----------------------------------------------------------------------
# timeout: >60min
#- job: macOS_spack
#  displayName: macOS spack
#  pool:
#    vmImage: macOS-latest
#  steps:
#  - script: |
#      brew update
#      brew install gcc
#      export SYSTEM=$(uname -s)
#      git clone https://github.com/spack/spack.git
#      . spack/share/spack/setup-env.sh
#      spack compiler find
#      spack install -v openpmd-api

- job: macOS_spack_nompi
  displayName: macOS spack from dev w/o MPI
  pool:
    vmImage: macOS-latest
  steps:
  - script: |
      export SYSTEM=$(uname -s)
      git clone https://github.com/spack/spack.git
      . spack/share/spack/setup-env.sh
      spack compiler find
      spack install -v openpmd-api@develop -mpi
      export CMAKE_PREFIX_PATH=$(spack location -i openpmd-api@develop -mpi):$(spack location -i mpark-variant):$(spack location -i adios):$(spack location -i adios2):$(spack location -i hdf5):$CMAKE_PREFIX_PATH
      wget https://gist.githubusercontent.com/ax3l/b2399f2e8923def6a5e55f8bd4e5384c/raw/89ed4101559c917bc7d857f9427682e3f5d40024/CMakeLists.txt
      wget -O main.cpp https://raw.githubusercontent.com/openPMD/openPMD-api/dev/examples/3_write_serial.cpp
      mkdir build
      cd build
      cmake ..
      make
      ./mytest

# timeout: >60min
#- job: macOS_spack_all
#  displayName: macOS spack w/ all
#  pool:
#    vmImage: macOS-latest
#  steps:
#  - script: |
#      brew update
#      brew install gcc
#      export SYSTEM=$(uname -s)
#      git clone https://github.com/spack/spack.git
#      . spack/share/spack/setup-env.sh
#      spack compiler find
#            spack bootstrap
#      . spack/share/spack/setup-env.sh
#      spack install -v openpmd-api +python +adios1 +adios2
#      spack load -r openpmd-api
#      python -c "import openpmd_api as api; print(api.variants)"

# homebrew --------------------------------------------------------------------
# TODO

# source ----------------------------------------------------------------------
# TODO


# Windows #####################################################################
#
# pip -------------------------------------------------------------------------
- job: win_pip_pypi
  displayName: Windows pip from PyPI
  pool:
    vmImage: vs2017-win2016
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.6'
      architecture: 'x64'
  - script: |
      which python
      python -m pip install -U pip --user
      python -m pip install -v openpmd-api --user
  - script: python -c "import openpmd_api as api; print(api.variants)"

- job: win_pip_pypi_nobin
  displayName: Windows pip from PyPI w/o binary
  pool:
    vmImage: vs2017-win2016
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
      architecture: 'x64'
  - script: |
      which python
      python -m pip install -U pip setuptools wheel cmake --user
      python -m pip install -v openpmd-api --no-binary openpmd-api --user
  - script: python -c "import openpmd_api as api; print(api.variants)"

- job: win_pip_dev
  displayName: Windows pip from dev
  pool:
#   vmImage: windows-latest
#   vmImage: windows-2019
    vmImage: vs2017-win2016
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
      architecture: 'x64'
  - script: |
      which python
      python -m pip install -U pip --user
      python -m pip install -v git+https://github.com/openPMD/openPMD-api.git@dev --user
  - script: python -c "import openpmd_api as api; print(api.variants)"

# conda -----------------------------------------------------------------------
# attn: each build step runs in its own process and might require
#       "call activate <env>"!
- job: win_conda
  displayName: Windows conda
  pool:
    vmImage: vs2017-win2016
  steps:
  - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
    displayName: Add conda command to PATH
  - script: |
      call activate base
      conda install -c conda-forge openpmd-api
    displayName: Activate base env, install openPMD package

#  - script: dumpbin.exe /dependents C:\Miniconda\Lib\site-packages\openpmd_api.cp37-win_amd64.pyd
  - script: |
      which python
      which python.exe

  - script: |
      call activate base
      which python
      which python.exe

  - script: |
      call activate base
      python -c "import openpmd_api as api; print(api.variants)"

# source ----------------------------------------------------------------------
# TODO

# other to do -----------------------------------------------------------------
#
# - open example data sets
# - compile downstream examples with NVCC and clang -x cuda
